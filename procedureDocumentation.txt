----------------------------- Gene Family - Presence/Absence Matrix-----------------------------------

1) Downloading the GBFF Files from NCBI - Assembly
This time, we need the genbank files in order to extract accession numbers and protein IDs 
from each.

2) Extract Protein Sequences - modified_get_features.pl
This extracts the protein sequences from the genbank files

	mkdir targetdirectory
        cd path/to/targetdirectory
	for x in *.gbff; 
        do 
            modified_get_features.pl -t $x > `basename $x`'.faa' 2>> errorfile.txt; 
        done

The errorfile.txt is technically not necessary, but can be a good reference later all for 
possible pseudogenes. The t flag for modifed_get_features.pl makes the head of
each sequence ters (only accnum:protID), see the file for more documentation.

3) Make a blast database
First, concatenate all the .faas into one file.
        
        wc -l *.faa #give the # of total lines
	cat *.faa > {# of total lines}{bacteria_name}.faa

	makeblastdb -in {#}{bacteria_name}.faa -out {bacteria_name}DB -dbtype 
	prot -parse_seqids 

4) Run the reciprocal blastp 

	blastp  -db {bacteria_name}DB 
                -query {#}{bacteria_name}.faa 
                -out {organism}allvsall_womobileelements_softmask_ws
                -evalue 5e-2 
                -outfmt '7 qseqid qlen qstart qend length sseqid slen qcovs score bitscore evalue' 
                -soft_masking true 
                -use_sw_tback
                 & (this is to make it run in the background)

Note: The num_threads argument was purposely left out due to segmentation faults and
abrupt abortions on info113, info114 and info115. As a result, this was omitted entirely. 
Alternative methods could be attempting to use a lesser number of cores or splitting up the
large *.faa file and manually running them in parallel.


5) Run Dr Golding's genefamily11.pl code, with the arguments as follows,
blastfile, outputfile name, concatenated .faa file

############################################################################################
BE VERY CAREFUL WHEN RUNNIG THIS CODE, MAKE A COPY OF THE BLAST FILE FIRST
AND RUN THIS CODE ON THAT COPY, IF YOU PUT THE ARGUMENTS IN THE WRONG ORDER
IT WILL DELETE THE CONTENTS OF YOU BLAST FILE.
############################################################################################
    cp {organism}allvsall_womobileelements_sfotmask_ws cp{organism}.blast

    sidwrapGeneFamily.bash {organism}allvsall_womobileelements_sfotmask_ws {organism}GeneFamilies.txt {# of total lines}{bacteria_name}.faa

This will filter the results of the blast file for all queries >85% match, all
queries/subjects that have a size ratio >0.85 and all reciprocoal hits. Then
the gene families are created and spit to a space delimited txt file
({organism}GeneFamilies.txt) as well as create a sepreate NRgenes file with
all of the singleton families and their sequences (NRgenes.faa).

6) Verifying Singleton Genes

Copy the NRgenes.faa file to the scratch disk and run a blastp on it against the nr databases:

	blastp -db /1/scratch/blastdb/nr -query proteinseqlist.txt -out [OUTPUT NAME] -evalue
	0.05 -parse_deflines -outfmt '7 qseqid qlen qstart qend length sseqid slen qcovs score
	bitscore evalue stitle sallseqid salltitles' -soft_masking true -use_sw_tback &

7) Run the createPresenceAbsencemtrix.R code using the genefamily.pl and
getTaxaNames outputs, This will give the finished presence absence matrix. as
well as a list of proteinID to be used to create a Tree


---------------------------Creating the Tree------------------------------------------------







